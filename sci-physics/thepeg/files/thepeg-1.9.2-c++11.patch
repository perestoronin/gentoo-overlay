--- old/Utilities/AnyReference.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/AnyReference.h	2017-10-25 16:13:43.919845366 +0200
@@ -161,7 +161,9 @@
      * Reset to not keep track of any reference.
      */
     void reset() {
-      if ( holder ) delete holder; holder = 0;
+		if ( holder ) {
+			delete holder; holder = 0;
+		}
     }
 
   public:
--- old/Utilities/CompSelector.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/CompSelector.h	2017-10-25 16:13:43.919845366 +0200
@@ -90,7 +90,7 @@
    * selected object.
    */
   template <typename RNDGEN>
-  T & select(RNDGEN & rnd) throw(range_error) {
+  T & select(RNDGEN & rnd) {
     ++N;
     if ( !compensating() ) last = selector.select(rnd);
     return last;
--- old/Utilities/UnitIO.h	2013-10-16 10:50:05.000000000 +0200
+++ new/Utilities/UnitIO.h	2017-10-25 16:13:43.919845366 +0200
@@ -177,8 +177,8 @@
 /** Output an OUnitErr object to a stream. */
 template <typename OStream, typename T, typename UT>
 OStream & operator<<(OStream & os, const OUnitErr<T,UT> & u) {
-  if ( isnan(u.x) || isinf(u.x) ) return os << u.x;
-  if ( isnan(u.dx) || isinf(u.dx) ) {
+  if ( std::isnan(u.x) || std::isinf(u.x) ) return os << u.x;
+  if ( std::isnan(u.dx) || std::isinf(u.dx) ) {
     ostringstream out;
     out << u.x << '(' << u.dx << ')';
     return os << out.str();
--- old/LesHouches/LesHouchesFileReader.cc	2013-10-16 10:50:05.000000000 +0200
+++ new/LesHouches/LesHouchesFileReader.cc	2017-10-25 16:13:43.919845366 +0200
@@ -21,6 +21,8 @@
 #include "ThePEG/Persistency/PersistentOStream.h"
 #include "ThePEG/Persistency/PersistentIStream.h"
 
+#include <cmath>
+
 using namespace ThePEG;
 
 LesHouchesFileReader::
@@ -580,9 +582,9 @@
 	          >> hepeup.PUP[i][3] >> hepeup.PUP[i][4]
         	  >> hepeup.VTIMUP[i] >> hepeup.SPINUP[i] ) )
       return false;
-    if(isnan(hepeup.PUP[i][0])||isnan(hepeup.PUP[i][1])||
-       isnan(hepeup.PUP[i][2])||isnan(hepeup.PUP[i][3])||
-       isnan(hepeup.PUP[i][4])) 
+    if(std::isnan(hepeup.PUP[i][0])||std::isnan(hepeup.PUP[i][1])||
+       std::isnan(hepeup.PUP[i][2])||std::isnan(hepeup.PUP[i][3])||
+       std::isnan(hepeup.PUP[i][4])) 
       throw Exception() 
 	<< "nan's as momenta in Les Houches file "
 	<< Exception::eventerror;
--- old/Utilities/VSelector.tcc	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/VSelector.tcc	2017-10-25 16:13:43.919845366 +0200
@@ -41,7 +41,7 @@
 
 template <typename T, typename WeightType>
 typename VSelector<T,WeightType>::size_type VSelector<T,WeightType>::
-iselect(double rnd, double * remainder) const throw(range_error) {
+iselect(double rnd, double * remainder) const {
   if ( rnd <= 0 )
     throw range_error("Random number out of range in VSelector::select.");
   WeightType sum = rnd*theSum;
--- old/Utilities/VSelector.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/VSelector.h	2017-10-25 16:13:43.919845366 +0200
@@ -135,7 +135,7 @@
    * a uniform random number in the interval ]0,1[ calculated from the
    * fraction of rnd which was in the range of the selected object.
    */
-  T & select(double rnd, double * remainder = 0) throw(range_error) {
+  T & select(double rnd, double * remainder = 0) {
     return theObjects[iselect(rnd, remainder)];
   }
 
@@ -146,7 +146,7 @@
    * inserted. If rnd <= 0 or if rnd >= 1 or the Selector is empty, a
    * range_error will be thrown.
    */
-  T & operator[](double rnd) throw(range_error) {
+  T & operator[](double rnd) {
     return select(rnd, 0);
   }
 
@@ -161,7 +161,7 @@
    * a uniform random number in the interval ]0,1[ calculated from the
    * fraction of rnd which was in the range of the selected object.
    */
-  const T & select(double rnd, double * remainder = 0) const throw(range_error) {
+  const T & select(double rnd, double * remainder = 0) const {
     return theObjects[iselect(rnd, remainder)];
   }
 
@@ -172,7 +172,7 @@
    * inserted. If rnd <= 0 or if rnd >= 1 or the Selector is empty, a
    * range_error will be thrown.
    */
-  const T & operator[](double rnd) const throw(range_error) {
+  const T & operator[](double rnd) const {
     return select(rnd, 0);
   }
 
@@ -189,7 +189,7 @@
    * selected object.
    */
   template <typename RNDGEN>
-  T & select(RNDGEN & rnd) throw(range_error) {
+  T & select(RNDGEN & rnd) {
     double rem = 0.0;
     T & t = select(rnd(), &rem);
     rnd.push_back(rem);
@@ -209,7 +209,7 @@
    * selected object.
    */
   template <typename RNDGEN>
-  const T & select(RNDGEN & rnd) const throw(range_error) {
+  const T & select(RNDGEN & rnd) const {
     double rem = 0.0;
     const T & t = select(rnd(), &rem);
     rnd.push_back(rem);
@@ -282,7 +282,7 @@
   /**
    * Internal selection engine.
    */
-  size_type iselect(double rnd, double * remainder) const throw(range_error);
+  size_type iselect(double rnd, double * remainder) const;
 
 private:
 
--- old/Utilities/Selector.tcc	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/Selector.tcc	2017-10-25 16:13:43.919845366 +0200
@@ -25,7 +25,7 @@
 
 template <typename T, typename WeightType>
 const T & Selector<T,WeightType>::
-select(double rnd, double * remainder) const throw(range_error) {
+select(double rnd, double * remainder) const {
   if ( rnd <= 0 )
     throw range_error("Random number out of range in Selector::select.");
   const_iterator it = theMap.upper_bound(rnd*theSum);
@@ -46,7 +46,7 @@
 
 template <typename T, typename WeightType>
 T & Selector<T,WeightType>::
-select(double rnd, double * remainder) throw(range_error) {
+select(double rnd, double * remainder) {
   if ( rnd <= 0 )
     throw range_error("Random number out of range in Selector::select.");
   iterator it = theMap.upper_bound(rnd*theSum);
--- old/Utilities/Selector.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/Selector.h	2017-10-25 16:13:43.919845366 +0200
@@ -128,7 +128,7 @@
    * a uniform random number in the interval ]0,1[ calculated from the
    * fraction of rnd which was in the range of the selected object.
    */
-  T & select(double rnd, double * remainder = 0) throw(range_error);
+  T & select(double rnd, double * remainder = 0);
 
   /**
    * Selct an object randomly. Given a random number flatly
@@ -137,7 +137,7 @@
    * inserted. If rnd <= 0 or if rnd >= 1 or the Selector is empty, a
    * range_error will be thrown.
    */
-  T & operator[](double rnd) throw(range_error) { return select(rnd); }
+  T & operator[](double rnd) { return select(rnd); }
 
   /**
    * Selct an object randomly. Given a random number flatly
@@ -150,7 +150,7 @@
    * a uniform random number in the interval ]0,1[ calculated from the
    * fraction of rnd which was in the range of the selected object.
    */
-  const T & select(double rnd, double * remainder = 0) const throw(range_error);
+  const T & select(double rnd, double * remainder = 0) const;
 
   /**
    * Selct an object randomly. Given a random number flatly
@@ -159,7 +159,7 @@
    * inserted. If rnd <= 0 or if rnd >= 1 or the Selector is empty, a
    * range_error will be thrown.
    */
-  const T & operator[](double rnd) const throw(range_error) { return select(rnd); } 
+  const T & operator[](double rnd) const { return select(rnd); } 
 
   /**
    * Selct an object randomly. Given a random number generator which
@@ -174,7 +174,7 @@
    * selected object.
    */
   template <typename RNDGEN>
-  T & select(RNDGEN & rnd) throw(range_error) {
+  T & select(RNDGEN & rnd) {
     double rem = 0.0;
     T & t = select(rnd(), &rem);
     rnd.push_back(rem);
@@ -194,7 +194,7 @@
    * selected object.
    */
   template <typename RNDGEN>
-  const T & select(RNDGEN & rnd) const throw(range_error) {
+  const T & select(RNDGEN & rnd) const {
     double rem = 0.0;
     const T & t = select(rnd(), &rem);
     rnd.push_back(rem);
--- old/Utilities/Rebinder.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/Rebinder.h	2017-10-25 16:13:43.919845366 +0200
@@ -78,7 +78,7 @@
    * @param r a pointer to an object of a type which is derived from T.
    */
   template <typename R>
-  R alwaysTranslate(const R & r) const throw(std::runtime_error) {
+  R alwaysTranslate(const R & r) const noexcept(false) {
     R ret;
     if ( !r ) return ret;
     const_iterator it = theMap.find(r);
@@ -94,8 +94,7 @@
    * exists, an exception will be thrown.
    */
   template <typename OutputIterator, typename InputIterator>
-  void alwaysTranslate(OutputIterator r, InputIterator first, InputIterator last)
-    const throw(std::runtime_error) {
+  void alwaysTranslate(OutputIterator r, InputIterator first, InputIterator last) const noexcept(false) {
     while ( first != last ) *r++ = alwaysTranslate(*first++);
   }
 
--- old/Persistency/PersistentOStream.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Persistency/PersistentOStream.h	2017-10-25 16:13:43.919845366 +0200
@@ -17,6 +17,8 @@
 #include "PersistentOStream.fh"
 #include "PersistentOStream.xh"
 
+#include <cmath>
+
 namespace ThePEG {
 
 /** @ingroup Persistency
@@ -219,7 +221,7 @@
    * Write a double.
    */
   PersistentOStream & operator<<(double d) {
-    if ( isnan(d) || isinf(d) )
+	if ( std::isnan(d) || std::isinf(d) )
       throw WriteError()
 	<< "Tried to write a NaN or Inf double to a persistent stream."
 	<< Exception::runerror;
@@ -232,7 +234,7 @@
    * Write a float.
    */
   PersistentOStream & operator<<(float f) {
-    if ( isnan(f) || isinf(f) )
+    if ( std::isnan(f) || std::isinf(f) )
       throw WriteError()
 	<< "Tried to write a NaN or Inf float to a persistent stream."
 	<< Exception::runerror;
--- old/Utilities/Throw.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Utilities/Throw.h	2017-10-25 16:13:43.919845366 +0200
@@ -82,7 +82,7 @@
   /**
    * The destructor will throw the exception if it has not been handled.
    */
-  ~Throw() {
+  ~Throw() noexcept(false) {
     if ( !handled ) throw ex;
   }
 
--- old/Config/ThePEG.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Config/ThePEG.h	2017-10-25 16:13:43.919845366 +0200
@@ -54,7 +54,7 @@
 struct Base: public ReferenceCounted {
 
   /** The virtual destructor */
-  virtual ~Base() {}
+  virtual ~Base() noexcept(false) {}
 
   /**
    * The standard Init function used to initialize the interfaces.
--- old/Interface/InterfacedBase.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Interface/InterfacedBase.h	2017-10-25 16:13:43.919845366 +0200
@@ -74,7 +74,7 @@
   /**
    * The virtual (empty) destructor;
    */
-  virtual ~InterfacedBase();
+  virtual ~InterfacedBase() noexcept(false);
 
   /**
    * Returns the full name of this object including its path, e.g.
--- old/Interface/Interfaced.h	2012-09-25 16:06:04.000000000 +0200
+++ new/Interface/Interfaced.h	2017-10-25 16:13:43.919845366 +0200
@@ -48,7 +48,7 @@
   /**
    * Empty virtual destructor
    */
-  virtual ~Interfaced();
+  virtual ~Interfaced() noexcept(false);
 
   /**
    * Functions which are to be used during the actual event
--- old/PDT/MatcherBase.h	2012-09-25 16:06:04.000000000 +0200
+++ new/PDT/MatcherBase.h	2017-10-25 16:13:43.919845366 +0200
@@ -60,7 +60,7 @@
   /**
    * Destructor.
    */
-  virtual ~MatcherBase();
+  virtual ~MatcherBase() noexcept(false);
   //@}
 
 public:
--- old/PDT/Matcher.h	2012-09-25 16:06:04.000000000 +0200
+++ new/PDT/Matcher.h	2017-10-25 16:13:43.919845366 +0200
@@ -33,7 +33,7 @@
   /**
    * Destructor.
    */
-  virtual ~Matcher();
+  virtual ~Matcher() noexcept(false);
   //@}
 
   /** @name Special clone and create functions used by the Repository. */
--- old/PDT/Matcher.tcc	2012-09-25 16:06:04.000000000 +0200
+++ new/PDT/Matcher.tcc	2017-10-25 16:13:43.919845366 +0200
@@ -14,7 +14,7 @@
 namespace ThePEG {
 
 template <class T>
-Matcher<T>::~Matcher() {
+Matcher<T>::~Matcher() noexcept(false) {
   if ( !initMatcher.check() ) throw int();
 } 
 
