--- a/cvmfs/json_document.cc	2019-04-25 08:51:34.620877553 +0200
+++ b/cvmfs/json_document.cc	2019-04-23 21:50:06.521713259 +0200
@@ -79,7 +79,7 @@
   raw_text_ = strdup(text.c_str());

   char *error_pos = 0;
-  char *error_desc = 0;
+  const char *error_desc = 0;
   int error_line = 0;
   JSON *root =
       json_parse(raw_text_, &error_pos, &error_desc, &error_line, &allocator_);
--- b/cvmfs/authz/helper_util.cc	2019-04-25 08:51:59.230018941 +0200
+++ a/cvmfs/authz/helper_util.cc	2019-04-23 21:41:37.139553299 +0200
@@ -40,7 +40,7 @@

 void ParseHandshakeInit(const string &msg) {
   block_allocator allocator(2048);
-  char *err_pos; char *err_desc; int err_line;
+  char *err_pos = nullptr; const char *err_desc = nullptr; int err_line = 0;
   JSON *json = json_parse(strdupa(msg.c_str()),
                           &err_pos, &err_desc, &err_line,
                           &allocator);
@@ -67,7 +67,7 @@

 void ParseRequest(const string &msg) {
   block_allocator allocator(2048);
-  char *err_pos; char *err_desc; int err_line;
+  char *err_pos = nullptr; const char *err_desc = nullptr; int err_line = 0;
   JSON *json = json_parse(strdupa(msg.c_str()),
                           &err_pos, &err_desc, &err_line,
                           &allocator);
--- a/CMakeLists.txt	2019-04-25 11:45:05.589650323 +0200
+++ b/CMakeLists.txt	2019-04-25 11:45:49.088162602 +0200
@@ -261,21 +261,6 @@
 if (NOT MACOSX)
   set (REQUIRED_HEADERS ${REQUIRED_HEADERS}
                         sys/statfs.h)
-
-  # As of attr-2.4.48, the attr/xattr.h header disappeard in favor of sys/xattr.h
-  #
-  # Unfortunately, attr/xattr.h fails to compile without including sys/types.h
-  # before including attr/xattr.h (it uses size_t and ssize_t).
-  # CMake searches for include files by compiling a minimal *.c file like:
-  #    #include <${SEARCHED_HEADER_FILE}>
-  #    int main(int argc, char **argv) { return 0; }
-  #
-  # We pre-define the include guard of attr/xattr.h and thus still check, if the
-  # file is found by the compiler but mitigating the compiler errors caused by
-  # a standalone inclusion of attr/xattr.h
-  set (CMAKE_REQUIRED_DEFINITIONS "-D__XATTR_H__")
-  set (OPTIONAL_HEADERS ${OPTIONAL_HEADERS}
-                        attr/xattr.h)
 endif (NOT MACOSX)

 look_for_required_include_files (${REQUIRED_HEADERS})
--- a/cvmfs/CMakeLists.txt	2019-03-08 19:56:58.000000000 +0100
+++ b/cvmfs/CMakeLists.txt	2019-04-25 12:14:43.417191659 +0200
@@ -610,8 +610,7 @@
 if (BUILD_LIBCVMFS_CACHE)
   add_library (cvmfs_cache_only STATIC ${LIBCVMFS_CACHE_SOURCES})
   add_dependencies (cvmfs_cache_only cache.pb.generated)
-  set (LIBCVMFS_CACHE_LIBS ${SHA3_LIBRARIES} ${PROTOBUF_LITE_LIBRARY}
-    ${LIBCVMFS_CACHE_LIBS} ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_cache_only.a)
+  set (LIBCVMFS_CACHE_LIBS ${LIBCVMFS_CACHE_LIBS} ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_cache_only.a)
   if (MACOSX)
     list(APPEND LIBCVMFS_CACHE_LIBS ${OPENSSL_LIBRARIES})
   endif (MACOSX)
@@ -649,6 +648,8 @@
   add_executable(cvmfs_cache_null ${CVMFS_CACHE_NULL_SOURCES})
   target_link_libraries(cvmfs_cache_null
                         ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_cache.a
+                        ${SPARSEHASH_LIBRARIES} ${PROTOBUF_LITE_LIBRARY}
+                        ${SHA3_LIBRARIES}
                         ${OPENSSL_LIBRARIES} ${RT_LIBRARY} pthread)
   add_dependencies(cvmfs_cache_null libcvmfs_cache)

@@ -658,6 +659,8 @@
                          "${CVMFS_CACHE_RAM_CFLAGS}")
   target_link_libraries(cvmfs_cache_ram
                         ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_cache.a
+                        ${SPARSEHASH_LIBRARIES} ${PROTOBUF_LITE_LIBRARY}
+                        ${SHA3_LIBRARIES}
                         ${OPENSSL_LIBRARIES} ${RT_LIBRARY} pthread)
   add_dependencies(cvmfs_cache_ram libcvmfs_cache)
 endif (BUILD_LIBCVMFS_CACHE)
@@ -667,11 +670,7 @@
   add_library (cvmfs_only STATIC ${LIBCVMFS_SOURCES})
   add_dependencies (cvmfs_only cache.pb.generated)

-  set (LIBCVMFS_LIBS ${CARES_LIBRARIES} ${CURL_LIBRARIES}
-                     ${LibWebsockets_LIBRARIES} ${PACPARSER_LIBRARIES}
-                     ${SQLITE3_LIBRARY} ${ZLIB_LIBRARIES} ${SPARSEHASH_LIBRARIES}
-                     ${SHA3_LIBRARIES} ${VJSON_LIBRARIES} ${PROTOBUF_LITE_LIBRARY}
-                     ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_only.a)
+  set (LIBCVMFS_LIBS ${CMAKE_CURRENT_BINARY_DIR}/libcvmfs_only.a)

   set_target_properties (cvmfs_only PROPERTIES COMPILE_FLAGS "${LIBCVMFS_CFLAGS}")
   target_link_libraries(cvmfs_only ${LIBCVMFS_LIBS})
@@ -705,6 +704,8 @@
   add_dependencies(test_libcvmfs libcvmfs)

   list(APPEND TEST_LIBCVMFS_LIBS ${SQLITE3_LIBRARY} ${CURL_LIBRARIES} ${LibWebsockets_LIBRARIES}
+                                 ${SPARSEHASH_LIBRARIES} ${PROTOBUF_LITE_LIBRARY}
+                                 ${SHA3_LIBRARIES} ${VJSON_LIBRARIES}
                                  ${CARES_LIBRARIES} ${PACPARSER_LIBRARIES} ${ZLIB_LIBRARIES}
                                  ${OPENSSL_LIBRARIES} ${RT_LIBRARY} ${UUID_LIBRARIES} pthread dl)
