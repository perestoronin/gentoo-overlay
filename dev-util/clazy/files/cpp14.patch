--- a/CMakeLists.txt	2020-03-21 13:48:36.862050662 +0100
+++ b/CMakeLists.txt	2020-03-21 13:47:17.074834902 +0100
@@ -39,6 +39,8 @@
 option(CLAZY_AST_MATCHERS_CRASH_WORKAROUND "Disable AST Matchers if being built with clang. See bug #392223" ON)
 option(LINK_CLAZY_TO_LLVM "Links the clazy plugin to LLVM. Switch to OFF if your clang binary has all symbols already. Might need to be OFF if your LLVM is static." ON)
 
+set(CMAKE_CXX_STANDARD 14)
+
 if (CLAZY_AST_MATCHERS_CRASH_WORKAROUND AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
     message("Enabling AST Matchers workaround. Consider building with gcc instead. See bug #392223.")
     add_definitions(-DCLAZY_DISABLE_AST_MATCHERS)
@@ -81,10 +83,10 @@
 include_directories(${CLANG_INCLUDE_DIRS} ${CMAKE_CURRENT_LIST_DIR} ${CMAKE_CURRENT_LIST_DIR}/src)
 link_directories("${LLVM_INSTALL_PREFIX}/lib" ${LLVM_LIBRARY_DIRS})
 
-if (${LLVM_VERSION} VERSION_GREATER_EQUAL "9.0.0")
-    set(clang_tooling_refactoring_lib clangToolingRefactoring)
-else()
+if (${LLVM_VERSION} VERSION_LESS "9.0.0")
     set(clang_tooling_refactoring_lib clangToolingRefactor)
+elseif (${LLVM_VERSION} VERSION_LESS_EQUAL "9.1.0")
+    set(clang_tooling_refactoring_lib clangToolingRefactoring)
 endif()
 
 macro(link_to_llvm name is_standalone)
@@ -124,9 +126,13 @@
   if(WIN32)
     target_link_libraries(${name} version.lib)
   endif()
+  if (${LLVM_VERSION} VERSION_LESS_EQUAL "9.1.0")
     target_link_libraries(${name} clangTooling)
     target_link_libraries(${name} clangToolingCore)
     target_link_libraries(${name} ${clang_tooling_refactoring_lib})
+  else()
+    target_link_libraries(${name} clang-cpp)
+  endif()
 endmacro()
 
 macro(add_clang_plugin name)
--- a/src/checks/level0/qstring-ref.cpp	2020-03-21 13:50:08.968836519 +0100
+++ b/src/checks/level0/qstring-ref.cpp	2020-03-21 12:58:02.078155191 +0100
@@ -117,7 +117,7 @@
         return true;
 
     if (auto mte = dyn_cast<MaterializeTemporaryExpr>(s)) {
-        return containsChild(mte->getTemporary(), target);
+        return containsChild(mte->getSubExpr(), target);
     } else if (auto ice = dyn_cast<ImplicitCastExpr>(s)) {
         return containsChild(ice->getSubExpr(), target);
     } else if (auto bte = dyn_cast<CXXBindTemporaryExpr>(s)) {
--- a/src/ClazyStandaloneMain.cpp	2020-03-21 13:50:38.307812709 +0100
+++ b/src/ClazyStandaloneMain.cpp	2020-03-21 13:51:05.496863926 +0100
@@ -93,7 +93,7 @@
     {
     }
 
-    FrontendAction *create() override
+    std::unique_ptr<FrontendAction> create() override
     {
         ClazyContext::ClazyOptions options = ClazyContext::ClazyOption_None;
 
@@ -116,9 +116,9 @@
             options |= ClazyContext::ClazyOption_IgnoreIncludedFiles;
 
         // TODO: We need to agregate the fixes with previous run
-        return new ClazyStandaloneASTAction(s_checks.getValue(), s_headerFilter.getValue(),
-                                            s_ignoreDirs.getValue(), s_exportFixes.getValue(),
-                                            m_paths, options);
+        return std::unique_ptr<FrontendAction>{new ClazyStandaloneASTAction(s_checks.getValue(), s_headerFilter.getValue(),
+                                                                            s_ignoreDirs.getValue(), s_exportFixes.getValue(),
+                                                                            m_paths, options)};
     }
     std::vector<std::string> m_paths;
 };
