--- a/third_party/gpus/cuda_configure.bzl	2020-07-15 12:18:26.994279948 +0200
+++ b/third_party/gpus/cuda_configure.bzl	2020-07-15 12:22:06.504586540 +0200
@@ -52,6 +52,7 @@
     "which",
 )

+_HOST_C_COMPILER = "HOST_C_COMPILER"
 _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
 _GCC_HOST_COMPILER_PREFIX = "GCC_HOST_COMPILER_PREFIX"
 _CLANG_CUDA_COMPILER_PATH = "CLANG_CUDA_COMPILER_PATH"
@@ -210,20 +211,24 @@
 # TODO(dzc): Once these functions have been factored out of Bazel's
 # cc_configure.bzl, load them from @bazel_tools instead.
 # BEGIN cc_configure common functions.
-def find_cc(repository_ctx):
+def find_cc(repository_ctx, cuda):
     """Find the C++ compiler."""
     if is_windows(repository_ctx):
         return _get_msvc_compiler(repository_ctx)
-
-    if _use_cuda_clang(repository_ctx):
-        target_cc_name = "clang"
-        cc_path_envvar = _CLANG_CUDA_COMPILER_PATH
-        if _flag_enabled(repository_ctx, _TF_DOWNLOAD_CLANG):
-            return "extra_tools/bin/clang"
+    if cuda:
+        if _use_cuda_clang(repository_ctx):
+            target_cc_name = "clang"
+            cc_path_envvar = _CLANG_CUDA_COMPILER_PATH
+            if _flag_enabled(repository_ctx, _TF_DOWNLOAD_CLANG):
+                return "extra_tools/bin/clang"
+        else:
+            target_cc_name = "gcc"
+            cc_path_envvar = _GCC_HOST_COMPILER_PATH
+            cc_name = target_cc_name
     else:
         target_cc_name = "gcc"
-        cc_path_envvar = _GCC_HOST_COMPILER_PATH
-    cc_name = target_cc_name
+        cc_path_envvar = _HOST_C_COMPILER
+        cc_name = target_cc_name

     cc_name_from_env = get_host_environ(repository_ctx, cc_path_envvar)
     if cc_name_from_env:
@@ -1012,14 +1017,23 @@
         download_clang(repository_ctx, "crosstool/extra_tools")

     # Set up crosstool/
-    cc = find_cc(repository_ctx)
+    cc = find_cc(repository_ctx, True)
     cc_fullpath = cc if not should_download_clang else "crosstool/" + cc
+    host_cc = find_cc(repository_ctx, False)
+    host_cc_fullpath = host_cc if not should_download_clang else "crosstool/" + host_cc

-    host_compiler_includes = get_cxx_inc_directories(
+    cuda_host_compiler_includes = get_cxx_inc_directories(
         repository_ctx,
         cc_fullpath,
         tf_sysroot,
     )
+    host_compiler_includes = get_cxx_inc_directories(
+        repository_ctx,
+        host_cc_fullpath,
+        tf_sysroot,
+    )
+    compiler_includes = host_compiler_includes + cuda_host_compiler_includes
+
     cuda_defines = {}
     cuda_defines["%{builtin_sysroot}"] = tf_sysroot
     cuda_defines["%{cuda_toolkit_path}"] = ""
@@ -1054,7 +1068,7 @@
         # switch it off for now.
         "-Wno-invalid-partial-specialization"
     """
-        cuda_defines["%{cxx_builtin_include_directories}"] = to_list_of_strings(host_compiler_includes)
+        cuda_defines["%{cxx_builtin_include_directories}"] = to_list_of_strings(compiler_includes)
         cuda_defines["%{compiler_deps}"] = ":empty"
         cuda_defines["%{win_compiler_deps}"] = ":empty"
         repository_ctx.file(
@@ -1070,7 +1084,7 @@
         # search them; we cannot work around that, so we add the relevant cuda
         # system paths to the allowed compiler specific include paths.
         cuda_defines["%{cxx_builtin_include_directories}"] = to_list_of_strings(
-            host_compiler_includes + _cuda_include_path(
+            compiler_includes + _cuda_include_path(
                 repository_ctx,
                 cuda_config,
             ) + [cupti_header_dir, cudnn_header_dir],
@@ -1089,7 +1103,7 @@
         cuda_defines["%{win_compiler_deps}"] = ":windows_msvc_wrapper_files"

         wrapper_defines = {
-            "%{cpu_compiler}": str(cc),
+            "%{cpu_compiler}": str(host_cc),
             "%{cuda_version}": cuda_config.cuda_version,
             "%{nvcc_path}": nvcc_path,
             "%{gcc_host_compiler_path}": str(cc),
@@ -1210,6 +1224,7 @@
         _create_local_cuda_repository(repository_ctx)

 _ENVIRONS = [
+    _HOST_C_COMPILER,
     _GCC_HOST_COMPILER_PATH,
     _GCC_HOST_COMPILER_PREFIX,
     _CLANG_CUDA_COMPILER_PATH,
