--- a/third_party/llvm/macos_build_fix.patch	2022-01-06 10:12:57.840210046 +0100
+++ b/third_party/llvm/macos_build_fix.patch	2022-01-06 10:14:22.201044963 +0100
@@ -22,6 +22,49 @@
      "@bazel_tools//src/conditions:linux_aarch64": native_arch_defines("AArch64", "aarch64-unknown-linux-gnu"),
      "//conditions:default": native_arch_defines("X86", "x86_64-unknown-linux-gnu"),
  }) + [
--- 
-2.33.0.685.g46640cef36-goog
+--- a/llvm/lib/Support/regcomp.c	2022-01-05 22:40:39.469404612 +0100
++++ b/llvm/lib/Support/regcomp.c	2022-01-05 14:41:48.530002366 +0100
+@@ -1213,12 +1213,12 @@
+ 		ptr = (cset *)realloc((char *)p->g->sets, nc * sizeof(cset));
+ 		if (ptr == NULL)
+ 			goto nomem;
+-		p->g->sets = ptr;
++		p->g->sets = (cset *)ptr;
 
+ 		ptr = (uch *)realloc((char *)p->g->setbits, nbytes);
+ 		if (ptr == NULL)
+ 			goto nomem;
+-		p->g->setbits = ptr;
++		p->g->setbits = (uch *)ptr;
+
+ 		for (i = 0; i < no; i++)
+ 			p->g->sets[i].ptr = p->g->setbits + css*(i/CHAR_BIT);
+@@ -1351,7 +1351,7 @@
+ 		SETERROR(REG_ESPACE);
+ 		return;
+ 	}
+-	cs->multis = np;
++	cs->multis = (char *)np;
+
+ 	llvm_strlcpy(cs->multis + oldend - 1, cp, cs->smultis - oldend + 1);
+ }
+@@ -1651,7 +1651,7 @@
+ 		return;
+
+ 	/* turn it into a character string */
+-	g->must = malloc((size_t)g->mlen + 1);
++	g->must = (char *)malloc((size_t)g->mlen + 1);
+ 	if (g->must == NULL) {		/* argh; just forget it */
+ 		g->mlen = 0;
+ 		return;
+--- a/llvm/lib/Support/regexec.c	2022-01-05 22:40:53.319554725 +0100
++++ b/llvm/lib/Support/regexec.c	2022-01-05 14:41:57.210091399 +0100
+@@ -111,7 +111,7 @@
+ #define	ASSIGN(d, s)	memmove(d, s, m->g->nstates)
+ #define	EQ(a, b)	(memcmp(a, b, m->g->nstates) == 0)
+ #define	STATEVARS	long vn; char *space
+-#define	STATESETUP(m, nv)	{ (m)->space = malloc((nv)*(m)->g->nstates); \
++#define	STATESETUP(m, nv)	{ (m)->space = (char *)malloc((nv)*(m)->g->nstates); \
+ 				if ((m)->space == NULL) return(REG_ESPACE); \
+ 				(m)->vn = 0; }
+ #define	STATETEARDOWN(m)	{ free((m)->space); }
--- a/third_party/repo.bzl	2022-01-06 10:41:22.106999758 +0100
+++ b/third_party/repo.bzl	2022-01-06 10:46:28.969989166 +0100
@@ -57,7 +57,10 @@
             stripPrefix = ctx.attr.strip_prefix,
         )
         if patch_file:
-            ctx.patch(patch_file, strip = 1)
+            patch_path = str(patch_file.realpath)
+            result = ctx.execute(["bash", "-c", "patch -p1 < " + patch_path])
+            if result.return_code != 0:
+                fail("Failed to patch (%s): %s" % (result.return_code, result.stderr))
 
     for dst, src in link_dict.items():
         ctx.delete(dst)
--- old/tensorflow/lite/experimental/microfrontend/lib/noise_reduction_util.c	2021-11-01 02:31:04.000000000 +0100
+++ new/tensorflow/lite/experimental/microfrontend/lib/noise_reduction_util.c	2022-01-08 17:11:42.759726714 +0100
@@ -32,7 +32,7 @@
   state->min_signal_remaining =
       config->min_signal_remaining * (1 << kNoiseReductionBits);
   state->num_channels = num_channels;
-  state->estimate = calloc(state->num_channels, sizeof(*state->estimate));
+  state->estimate = (unsigned*)calloc(state->num_channels, sizeof(*state->estimate));
   if (state->estimate == NULL) {
     fprintf(stderr, "Failed to alloc estimate buffer\n");
     return 0;
