--- old/c10/CMakeLists.txt	2023-02-16 21:48:59.380265018 +0100
+++ new/c10/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -112,7 +112,7 @@
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10 EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
--- old/c10/cuda/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/c10/cuda/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -64,7 +64,7 @@
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10_cuda EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_cuda EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 foreach(file ${C10_CUDA_HEADERS})
   get_filename_component( dir ${file} DIRECTORY )
   install( FILES ${file} DESTINATION include/c10/cuda/${dir} )
--- old/c10/hip/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/c10/hip/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -55,7 +55,7 @@
 add_subdirectory(test)
 
 # ---[ Installation
-install(TARGETS c10_hip EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_hip EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
--- old/modules/detectron/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/modules/detectron/CMakeLists.txt	2023-02-16 21:46:58.218269655 +0100
@@ -20,7 +20,7 @@
     if(USE_MKLDNN)
       target_link_libraries(caffe2_detectron_ops_gpu PRIVATE caffe2::mkldnn)
     endif()
-    install(TARGETS caffe2_detectron_ops_gpu DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_gpu DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops_gpu> DESTINATION lib OPTIONAL)
     endif()
@@ -37,7 +37,7 @@
       target_link_libraries(caffe2_detectron_ops_hip PRIVATE caffe2::mkldnn)
     endif()
     target_link_libraries(caffe2_detectron_ops_hip PRIVATE torch)
-    install(TARGETS caffe2_detectron_ops_hip DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_hip DESTINATION ${CMAKE_INSTALL_LIBDIR})
   elseif(NOT IOS_PLATFORM)
     add_library(caffe2_detectron_ops SHARED ${Detectron_CPU_SRCS})
     if(HAVE_SOVERSION)
@@ -49,7 +49,7 @@
     if(USE_MKLDNN)
       target_link_libraries(caffe2_detectron_ops PRIVATE caffe2::mkldnn)
     endif()
-    install(TARGETS caffe2_detectron_ops DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops> DESTINATION lib OPTIONAL)
     endif()
--- old/modules/module_test/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/modules/module_test/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -16,7 +16,7 @@
         VERSION ${TORCH_VERSION} SOVERSION ${TORCH_SOVERSION})
   endif()
   target_link_libraries(caffe2_module_test_dynamic torch_library)
-  install(TARGETS caffe2_module_test_dynamic DESTINATION lib)
+  install(TARGETS caffe2_module_test_dynamic DESTINATION ${CMAKE_INSTALL_LIBDIR})
   if(MSVC AND BUILD_SHARED_LIBS)
     install(FILES $<TARGET_PDB_FILE:caffe2_module_test_dynamic> DESTINATION lib OPTIONAL)
   endif()
--- old/modules/observers/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/modules/observers/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -21,7 +21,7 @@
 target_link_libraries(caffe2_observers PUBLIC torch_library)
 target_include_directories(caffe2_observers PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/..)
 target_compile_options(caffe2_observers PRIVATE "-DCAFFE2_BUILD_OBSERVER_LIB")
-install(TARGETS caffe2_observers DESTINATION lib)
+install(TARGETS caffe2_observers DESTINATION ${CMAKE_INSTALL_LIBDIR})
 caffe2_interface_library(caffe2_observers caffe2_observers_library)
 if(MSVC AND BUILD_SHARED_LIBS)
   install(FILES $<TARGET_PDB_FILE:caffe2_observers> DESTINATION lib OPTIONAL)
--- old/modules/rocksdb/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/modules/rocksdb/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -63,7 +63,7 @@
 target_link_libraries(caffe2_rocksdb PUBLIC torch_library)
 target_link_libraries(caffe2_rocksdb PRIVATE ${RocksDB_LIBRARIES})
 target_include_directories(caffe2_rocksdb PRIVATE ${RocksDB_INCLUDE_DIR})
-install(TARGETS caffe2_rocksdb DESTINATION lib)
+install(TARGETS caffe2_rocksdb DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 # ---[ Last, Append the library to Caffe2_MODULES, if we are building with
 # the main repo.
--- old/test/cpp/c10d/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/test/cpp/c10d/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -51,7 +51,7 @@
     if(INSTALL_TEST)
       install(TARGETS ProcessGroupNCCLTest DESTINATION bin)
       install(TARGETS ProcessGroupNCCLErrorsTest DESTINATION bin)
-      install(TARGETS c10d_cuda_test DESTINATION lib)
+      install(TARGETS c10d_cuda_test DESTINATION ${CMAKE_INSTALL_LIBDIR})
     endif()
   endif()
   if(USE_UCC AND USE_C10D_UCC)
--- old/test/cpp/jit/CMakeLists.txt	2022-12-08 19:13:26.000000000 +0100
+++ new/test/cpp/jit/CMakeLists.txt	2023-02-16 21:45:19.846647518 +0100
@@ -32,9 +32,9 @@
 target_link_libraries(backend_with_compiler torch)
 
 if(INSTALL_TEST)
-  install(TARGETS torchbind_test DESTINATION lib)
-  install(TARGETS jitbackend_test DESTINATION lib)
-  install(TARGETS backend_with_compiler DESTINATION lib)
+  install(TARGETS torchbind_test DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  install(TARGETS jitbackend_test DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  install(TARGETS backend_with_compiler DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
 
 # Build the cpp gtest binary containing the cpp-only tests.
