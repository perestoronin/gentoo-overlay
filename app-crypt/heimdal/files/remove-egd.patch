--- old/lib/hcrypto/libhcrypto-exports.def	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/libhcrypto-exports.def	2014-11-09 14:24:20.250399137 +0100
@@ -221,9 +221,6 @@
 	hc_RAND_add
 	hc_RAND_bytes
 	hc_RAND_cleanup
-;!	hc_RAND_egd
-;!	hc_RAND_egd_bytes
-;!	hc_RAND_egd_method
 	hc_RAND_file_name
 ;!	hc_RAND_fortuna_method
 	hc_RAND_get_rand_method
--- old/lib/hcrypto/test_rand.c	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/test_rand.c	2014-11-09 14:24:50.500398914 +0100
@@ -123,10 +123,6 @@
 	else if (strcasecmp(rand_method, "unix") == 0)
 	    RAND_set_rand_method(RAND_unix_method());
 #endif
-#ifndef NO_RAND_EGD_METHOD
-	else if (strcasecmp(rand_method, "egd") == 0)
-	    RAND_set_rand_method(RAND_egd_method());
-#endif
 #ifdef WIN32
 	else if (strcasecmp(rand_method, "w32crypto") == 0)
 	    RAND_set_rand_method(RAND_w32crypto_method());
--- old/lib/hcrypto/version-script.map	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/version-script.map	2014-11-09 14:25:23.160398673 +0100
@@ -226,9 +226,6 @@
 		hc_RAND_add;
 		hc_RAND_bytes;
 		hc_RAND_cleanup;
-		hc_RAND_egd;
-		hc_RAND_egd_bytes;
-		hc_RAND_egd_method;
 		hc_RAND_file_name;
 		hc_RAND_fortuna_method;
 		hc_RAND_get_rand_method;
--- old/lib/hcrypto/Makefile.am	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/Makefile.am	2014-11-09 14:25:47.770398491 +0100
@@ -125,7 +125,6 @@
 	md5.h		\
 	pkcs5.c		\
 	pkcs12.c	\
-	rand-egd.c	\
 	rand-fortuna.c	\
 	rand-timer.c	\
 	rand-unix.c	\
--- old/lib/hcrypto/randi.h	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/randi.h	2014-11-09 14:26:25.290398214 +0100
@@ -40,7 +40,6 @@
 
 extern const RAND_METHOD hc_rand_fortuna_method;
 extern const RAND_METHOD hc_rand_unix_method;
-extern const RAND_METHOD hc_rand_egd_method;
 extern const RAND_METHOD hc_rand_timer_method;
 extern const RAND_METHOD hc_rand_w32crypto_method;
 
--- old/lib/hcrypto/test_crypto.in	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/test_crypto.in	2014-11-09 14:26:34.680398145 +0100
@@ -59,7 +59,7 @@
 
 ${rsa} --loops=4 || { echo "rsa test for 4 loops failed" ; exit 1; }
 
-for a in unix fortuna egd w32crypto ;do
+for a in unix fortuna w32crypto ;do
 	${rand} --method=${a} --file=crypto-test 2>error
 	res=$?
 	if test "X$res" != X0 ; then
--- old/lib/hcrypto/rand-fortuna.c	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/rand-fortuna.c	2014-11-09 14:23:56.790399310 +0100
@@ -486,20 +486,6 @@
 	entropy_p = 1;
     }
 #endif
-#ifndef NO_RAND_EGD_METHOD
-    /*
-     * Only to get egd entropy if /dev/random or arc4rand failed since
-     * it can be horribly slow to generate new bits.
-     */
-    if (!entropy_p) {
-	unsigned char buf[INIT_BYTES];
-	if ((*hc_rand_egd_method.bytes)(buf, sizeof(buf)) == 1) {
-	    add_entropy(&main_state, buf, sizeof(buf));
-	    entropy_p = 1;
-	    memset(buf, 0, sizeof(buf));
-	}
-    }
-#endif
     /*
      * Fall back to gattering data from timer and secret files, this
      * is really the last resort.
--- old/lib/hcrypto/rand.h	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/hcrypto/rand.h	2014-11-09 14:22:51.090399795 +0100
@@ -56,10 +56,7 @@
 #define RAND_load_file hc_RAND_load_file
 #define RAND_write_file hc_RAND_write_file
 #define RAND_status hc_RAND_status
-#define RAND_egd hc_RAND_egd
-#define RAND_egd_bytes hc_RAND_egd_bytes
 #define RAND_fortuna_method hc_RAND_fortuna_method
-#define RAND_egd_method hc_RAND_egd_method
 #define RAND_unix_method hc_RAND_unix_method
 #define RAND_w32crypto_method hc_RAND_w32crypto_method
 
@@ -97,13 +94,9 @@
 int	RAND_load_file(const char *, size_t);
 int	RAND_write_file(const char *);
 int	RAND_status(void);
-int	RAND_egd(const char *);
-int	RAND_egd_bytes(const char *, int);
-
 
 const RAND_METHOD *	RAND_fortuna_method(void);
 const RAND_METHOD *	RAND_unix_method(void);
-const RAND_METHOD *	RAND_egd_method(void);
 const RAND_METHOD *	RAND_w32crypto_method(void);
 
 #endif /* _HEIM_RAND_H */
--- old/lib/krb5/crypto-rand.c	2012-12-09 23:06:44.000000000 +0100
+++ new/lib/krb5/crypto-rand.c	2014-11-09 14:22:17.160400045 +0100
@@ -59,27 +59,6 @@
     } else
 	seedfile[0] = '\0';
 
-    /* Calling RAND_status() will try to use /dev/urandom if it exists so
-       we do not have to deal with it. */
-    if (RAND_status() != 1) {
-#ifndef _WIN32
-	krb5_context context;
-	const char *p;
-
-	/* Try using egd */
-	if (!krb5_init_context(&context)) {
-	    p = krb5_config_get_string(context, NULL, "libdefaults",
-				       "egd_socket", NULL);
-	    if (p != NULL)
-		RAND_egd_bytes(p, ENTROPY_NEEDED);
-	    krb5_free_context(context);
-	}
-#else
-	/* TODO: Once a Windows CryptoAPI RAND method is defined, we
-	   can use that and failover to another method. */
-#endif
-    }
-
     if (RAND_status() == 1)	{
 	/* Update the seed file */
 	if (seedfile[0])
