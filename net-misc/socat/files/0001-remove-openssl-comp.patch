diff -ru socat-1.7.3.0/doc/xio.help socat-1.7.3.0.new/doc/xio.help
--- socat-1.7.3.0/doc/xio.help	2013-06-23 14:16:48.000000000 +0800
+++ socat-1.7.3.0.new/doc/xio.help	2015-11-18 10:56:02.408674607 +0800
@@ -123,7 +123,7 @@
 It always works on stdin and stdout; if stdio is not a tty, readline does not
 seem to work correctly.
 Because readline is blocking during line editing, it does not fit well into
-socats I/O philosophy. 
+socats I/O philosophy.
 socat integrates readline by waiting in the select call as usual; when stdin
 reports available data, socat invokes readline(). readline blocks until the
 user presses ENTER or EOF. Data on socats other stream is not handling in this
@@ -144,7 +144,7 @@
 with this name already exists it is opened. Open for reading and/or writing
 depends on the rw parameter of the xioopen call, or on usage in a socat
 argument. If no perm option is used, xioopen uses 600 (which might be modified
-by umask then). 
+by umask then).
 Applying this function to files conforms to the semantics as described by the
 open(2) man page.
 Opening device files, like /dev/ttyS*, might block until the device gets active
@@ -157,9 +157,9 @@
 Opening the pipe in write mode blocks until a reader opens the pipe (close
 by reader gives "broken pipe" error on next write); with option nonblock the
 open call terminates with error "no such device or address" in absence of a
-reader. 
+reader.
 Opening a named UNIX stream socket with or without a listening peer might
-succeed depending on the operating system, but 
+succeed depending on the operating system, but
 the resulting file descriptor erronously reports available data immediately,
 and the following read() or write() call always fails with "invalid
 argument". Even worse, while such a filesystem entry is identified as socket by
@@ -206,7 +206,7 @@
 FIFO:path
 
 Creates and opens a pipe if path does not exist; opens path if it already
-exists. 
+exists.
 Option groups: FD, NAMED, FIFO
 Note: this address uses the mknod(2) system call to create the named pipe. On
 FreeBSD, this call requires root privilege
@@ -246,7 +246,7 @@
 Connects to a UNIX domain socket.
 Option groups: FD, SOCKET, SOCK_UNIX
 NOTE: you need rw permissions to connect to a local socket. My Linux answers
-with "connection refused" to insufficient permissions, not existing 
+with "connection refused" to insufficient permissions, not existing
 socket, not a socket, or just a socket entry without a listening process.
 NOTE: this address does not implement option group NAMED because its connect
 call succeeds only if there is already someone listening, but at this point the
@@ -268,7 +268,7 @@
 Open a raw socket with IP4 protocol. This mode sends packets to and accepts
 them only from host. protocol is a number from 0 to 255, with 1 meaning ICMP,
 6..TCP,  17..UDP, 255..raw IP; 0 might be unsupported by the local IP stack,
-resulting in an error. 
+resulting in an error.
 Requires root privilege.
 Note: my Linux 2.4.10 kernel seems to drop payloads smaller than 8
 bytes on their way from the network to the application.
@@ -281,7 +281,7 @@
 
 Create a TCP/IP4 client socket and connect to the given host/port combination.
 Option groups: FD, SOCKET, SOCK_IP, IPAPP, IP_TCP
-Useful options: crlf, bind, tos, mtudiscover, mss, nodelay, 
+Useful options: crlf, bind, tos, mtudiscover, mss, nodelay,
 
 
 TCP-l:port
@@ -367,7 +367,7 @@
 Use a socks server, socks protocol version 4, to build a TCP (IPv4) connection.
 Sockd is the name or address of the socks server, host and port specify the
 destination address. Use option socksport if the socks server does not listen
-on port 1080. 
+on port 1080.
 Option groups: FD, SOCKET, SOCK_IP, IPAPP, IP_TCP, IP_SOCKS
 Useful options: sp, socksport, socksuser
 Note: If you do not specify option socksuser, xioopen tries to derive it from
@@ -425,7 +425,7 @@
 
 Each option is member of one option group. Address definitions specify which
 option groups they support. This allows to reject unapplyable options in an
-early stage of address processing. 
+early stage of address processing.
 
 Address groups are identified by single bit positions. Option definitions
 specify to which group the option belongs (some options are member or more than
@@ -438,14 +438,14 @@
 options are typically applied with fcntl() or some special calls like fchown()
 or fchmod(). There is no documented restriction to apply these functions to any
 file descriptor; but they are not always meaningful, and sometimes lead to OS
-exceptions. 
+exceptions.
 
 GROUP_APPL: All addresses. The options do not need file descriptors, because
 they manipulate the data streams at application level (ignoreeof, line
 terminator conversion).
 
 GROUP_PROCESS: For options that change process related attributes, like user id
-(setuid). 
+(setuid).
 
 GROUP_FIFO: Options for pipes. Currently not used.
 
@@ -524,7 +524,7 @@
 Note:
 "Type" describes the type of data that may or must be given to the option and
 that is passed to the system. There are some options with boolean semantics
-(on/off or yes/no), but their values are passed to the system with an int 
+(on/off or yes/no), but their values are passed to the system with an int
 parameter. This situation is indicated as "Logical type: bool" and "Physical
 type: int". In this case xioopen passes the physical value to the system,
 giving the user one more hacking playground.
@@ -540,7 +540,7 @@
 Sets the O_APPEND flag via a fcntl() call and F_SETFL; with OPEN type
 addresses, this flag is applied with the open() call. All data written is
 appended to the actual file end, even if other processes have written to or
-truncated the file in the meantime. 
+truncated the file in the meantime.
 
 
 Option: async
@@ -552,7 +552,7 @@
 
 Sets the O_ASYNC (or FASYNC) flag via a fcntl() call and F_SETFL; with FILE
 addresses, this flag is applied with the open() call. Consult your kernel
-documentation for effects of this flag. 
+documentation for effects of this flag.
 NOTE: socat does not handle the SIGIO signal.
 
 
@@ -595,7 +595,7 @@
 
 Applies the flock(fd, LOCK_EX|LOCK_NB) call to the file descriptor(s). This locks a file
 exclusively (but only for processes also using flock() on this file -
-otherwise, they seem to have unrestricted access). 
+otherwise, they seem to have unrestricted access).
 If the file is already locked with flock, our flock call returns the error
 "Resource temporarily unavailable".
 
@@ -607,10 +607,10 @@
 Phase: FD
 Platforms: FreeBSD, Linux
 
-Applies a shared advisory lock to the file using the flock(fd, LOCK_SH) call. 
+Applies a shared advisory lock to the file using the flock(fd, LOCK_SH) call.
 This prevents processes from locking the file exclusively.
 If the file has already an exclusive lock, our flock call blocks until the
-other processes lock is released. 
+other processes lock is released.
 
 
 Option: flock-sh-nb
@@ -620,7 +620,7 @@
 Phase: FD
 Platforms: FreeBSD, Linux
 
-Applies a shared advisory lock to the file using the flock(fd, LOCK_SH|LOCK_NB) call. 
+Applies a shared advisory lock to the file using the flock(fd, LOCK_SH|LOCK_NB) call.
 This prevents processes from locking the file exclusively.
 If the file has already an exclusive lock, our flock call returns with error
 "Resource temporarily unavailable".
@@ -716,7 +716,7 @@
 
 Takes one argument, a UNIX group name or a numeric group id. The first
 character of value is a digit for group ids.
-With NAMED addresses this option is applied via a chown() call, with a 
+With NAMED addresses this option is applied via a chown() call, with a
 fchown() call otherwise.
 If groupname is a name it must be a valid groupname from /etc/group and is
 converted to a group id with a getgrnam(3) call.
@@ -847,7 +847,7 @@
 Platforms: HP-UX, Linux, SunOS
 
 Positions the file at the given offset from the current position,
-using lseek() (or lseek64() if available) with SEEK_SET. 
+using lseek() (or lseek64() if available) with SEEK_SET.
 
 
 Option: seek-end=offset
@@ -886,7 +886,7 @@
 with SEEK_CUR. This call
 might fail for non random access data objects like character devices.
 On Linux, the seek() call fails on pipes, sockets and ttys but works on files
-and /dev/null 
+and /dev/null
 NOTE: this option seems to be useless on files with O_APPEND set.
 
 
@@ -951,8 +951,8 @@
 Platforms: all
 
 Invokes the chroot() system call with the given path after the address
-resolution, so the path names of the address must be specified with absolute 
-pathes. 
+resolution, so the path names of the address must be specified with absolute
+pathes.
 Note: when you combine chroot with substuser, with substuser applied within the
 chroot environment, usually the etc/passwd and etc/group files in the chroot
 environment are used for group set etc.
@@ -1153,7 +1153,7 @@
    the file descriptors. This is useful when the connection is to be reused by
    or shared with other processes.
    Normally, socket connections will be ended with shutdown(2) which
-   terminates the socket even if it is shared by multiple processes. 
+   terminates the socket even if it is shared by multiple processes.
    close(2) "unlinks" the socket from the process but keeps it active as
    long as there are still links from other processes.
    Similarly, when an address of type EXEC or SYSTEM is ended, socat usually
@@ -1195,7 +1195,7 @@
 Takes one argument, a UNIX user name or a numeric user id. The first
 character of value is a digit for user ids.
 This option is applied via a fchown() call just before xioopen_single()
-terminates. 
+terminates.
 If username is a name it must be a valid username from /etc/passwd and is
 converted to a user id with a getpwnam() call.
 On sane operating systems, the owner of the process must be root to change
@@ -1219,7 +1219,7 @@
 Phase: OPEN
 Platforms: all
 
-Use O_RDONLY with the open() call instead of the position dependend default. 
+Use O_RDONLY with the open() call instead of the position dependend default.
 Take care not to block later write operations.
 
 
@@ -1231,7 +1231,7 @@
 Phase: OPEN
 Platforms: all
 
-Use O_WRONLY with the open() call instead of the position dependend default. 
+Use O_WRONLY with the open() call instead of the position dependend default.
 Take care not to block later write operations.
 
 
@@ -1243,7 +1243,7 @@
 Phase: OPEN
 Platforms: all
 
-Use O_RDWR with the open() call instead of the position dependend default. 
+Use O_RDWR with the open() call instead of the position dependend default.
 
 
 Option: o-create
@@ -1463,7 +1463,7 @@
 Phase: PASTOPEN
 Platforms: all
 
-This option tries to remove the filesystem entry after it has been opened. 
+This option tries to remove the filesystem entry after it has been opened.
 Options can still be applied to the file descriptor, and
 the node or files data can be used, but it can no longer be accessed by other
 processes (except by tricks?), and after closing the stream the data or node is
@@ -1579,7 +1579,7 @@
  * the first socat address cannot be OPENSSL or READLINE
  * socat options -b, -t, -D, -l, -v, -x, -t become useless
  * for both addresses, options ignoreeof, cr and crnl become useless
- * for the second address (the one with option nofork), options 
+ * for the second address (the one with option nofork), options
    append, async, cloexec, flock, user, group, mode, nonblock,
    perm-late, setlk, and setpgid cannot be applied, and should be used on the
    first address instead.
@@ -1605,7 +1605,7 @@
 
 For communication between the exec() or system() subprocess with socat, use a
 pseudo terminal instead of a socket pair. The executed program gets the slave
-side, and socat the controlling side of the pseudo terminal. 
+side, and socat the controlling side of the pseudo terminal.
 This is especially useful if you want to use, e.g., chat with socat (see
 EXAMPLES). Plus, ptys do not buffer I/O.
 Note: implementation of pseudo terminals are differing between platforms, so
@@ -1742,7 +1742,7 @@
 Platforms: FreeBSD, Linux
 
 Like pty, but only use the openpty mechanism, not any other way for pty
-generation. 
+generation.
 
 
 Option: ptmx
@@ -1753,7 +1753,7 @@
 Platforms: HP-UX, Linux, SunOS
 
 Like pty, but only use the /dev/ptmx (/dev/ptc on AIX) mechanism, not any other
-way for pty generation. 
+way for pty generation.
 
 
 Option: symbolic-link=filename
@@ -1782,11 +1782,11 @@
    Usually, socat continues after generating the pty with opening the next
    address or with entering the transfer engine. With the wait-slave option,
    socat waits until some process opens the slave side of the pty before
-   continuing. 
+   continuing.
    This option only works if the operating system provides the tt(poll())
    system call. And it depends on an undocumented behaviour of pty's, so it
    does not work on all operating systems. It has successfully been tested on
-   Linux, FreeBSD, NetBSD, and on Tru64 with openpty. 
+   Linux, FreeBSD, NetBSD, and on Tru64 with openpty.
 
 
 Option: pty-interval
@@ -1798,7 +1798,7 @@
 
    When the wait-slave option is set, socat periodically checks the HUP
    condition using poll() to find if the pty's slave side has been
-   opened. The default 
+   opened. The default
    polling interval is 1s. Use the pty-interval option to change this value.
 
 
@@ -1984,8 +1984,8 @@
 Platforms: all
 
 Set the sockettype argument of the socket() or socketpair() call. This
-overrides the per 
-protocol default (e.g., TCP: SOCK_STREAM). Most values might 
+overrides the per
+protocol default (e.g., TCP: SOCK_STREAM). Most values might
 not be supported by a given protocol.
 The following combinations are known to work at least under one OS:
 TCP     SOCK_STREAM (system default)
@@ -2282,7 +2282,7 @@
 Phase: PASTSOCKET
 Platforms: SunOS
 
-Sets the SO_DGRAM_ERRIND flag. 
+Sets the SO_DGRAM_ERRIND flag.
 
 
 Option: so-dontlinger
@@ -2316,7 +2316,7 @@
 
 Sets the type of the socket, usually as argument to the socket() or
 socketpair() call, to <type>. Under Linux, 1 means stream oriented socket, 2
-means datagram socket, and 3 means raw socket.  
+means datagram socket, and 3 means raw socket.
 
 
 Option: protocol-family
@@ -2430,10 +2430,10 @@
 
 Uses the rules introduced by Wietse Venema's libwrap (tcpd) library to check
 if the client is allowed to connect. The configuration files are
-/etc/hosts.allow and /etc/hosts.deny. See "man 5 hosts_access" for 
+/etc/hosts.allow and /etc/hosts.deny. See "man 5 hosts_access" for
 more information. <name> is passed to the wrapper functions as daemon
 process name. If omitted, the basename of socats invokation (argv[0]) is
-passed. 
+passed.
 If both tcpwrap and and range options are applied to an address, both
 conditions must be fulfilled to allow the connection.
 
@@ -2541,7 +2541,7 @@
 Platforms: all
 Implementation status: No results.
 
-Set the IP_RECVTTL socket option. 
+Set the IP_RECVTTL socket option.
 
 
 Option: ip-recvopts
@@ -2554,7 +2554,7 @@
 Platforms: all
 Implementation status: No results.
 
-Set the IP_RECVOPTS socket option. 
+Set the IP_RECVOPTS socket option.
 
 
 Option: ip-retopts
@@ -2567,7 +2567,7 @@
 Platforms: all
 Implementation status: No results.
 
-Set the IP_RETOPTS socket option. 
+Set the IP_RETOPTS socket option.
 
 
 Option: ip-tos=value
@@ -2620,7 +2620,7 @@
 Phase: PASTSOCKET
 Platforms: Linux
 
-Set the IP_RECVERR socket option. 
+Set the IP_RECVERR socket option.
 Implementation status: No results.
 
 
@@ -2883,7 +2883,7 @@
 
 For outgoing (client) TCP and UDP connections, it sets the source port (local port, client side port) of
 the socket connection. For server type addresses, requires the client to use
-this sourceport, otherwise socat immediately shuts down the connection. 
+this sourceport, otherwise socat immediately shuts down the connection.
 On UNIX class operating systems root privilege are required to set a source
 port  between 1 and 1023 incl. 0 gives a "random" port number >= 1024, which is
 the default.
@@ -3033,7 +3033,7 @@
 Platforms: Linux
 
 Sets the TCP_SYNCNT value of the socket with setsockopt(). Number of SYN
-retransmits. 
+retransmits.
 
 
 Option: tcp-linger2
@@ -3265,7 +3265,7 @@
 Platforms: all
 
 The HTTP protocol requires the use of CR+NL as line terminator. When a proxy
-server violates this standard, socat might not understand its answer. 
+server violates this standard, socat might not understand its answer.
 This option directs socat to interprete NL as line terminator and
 to ignore CR in the answer. Nevertheless, socat sends CR+NL to the proxy.
 
@@ -3313,7 +3313,7 @@
 Phase: FD
 Platforms: all
 
-Is equivalent to 
+Is equivalent to
 ignbrk=0,brkint=0,ignpar=0,parmrk=0,inpck=0,istrip=0,inlcr=0,igncr=0,icrnl=0,ixon=0,ixoff=0,iuclc=0,ixany=0,imaxbel=0,opost=0,isig=0,icanon=0,xcase=0,vmin=1,vtime=0
 
 
@@ -4182,7 +4182,7 @@
 Platforms: all
 Status: tested
 
-Sets the value for the VQUIT character that quits the current process. 
+Sets the value for the VQUIT character that quits the current process.
 On my Linux 2.2 system the preset value is 0x1c (^\).
 
 
@@ -4426,11 +4426,11 @@
 Phase: LATE
 Platforms: all
 
-Since version 1.3.3, socat per default tries to determine a prompt - 
+Since version 1.3.3, socat per default tries to determine a prompt -
 that is then passed to the readline call - by remembering the last
 incomplete line of the output. With this option, socat does not pass a
 prompt to the readline call, so it might set the cursor to the first column
-of the terminal. 
+of the terminal.
 
 
 Option: noecho
@@ -4442,7 +4442,7 @@
 
 Specifies a regular pattern for a prompt that prevents the following input
 line from being displayed on the screen and from being added to the history.
-The prompt is defined as the text that was output to the readline address 
+The prompt is defined as the text that was output to the readline address
 after the lastest newline character and before an input character was
 typed. The pattern is a regular expression, e.g.
 "^[Pp]assword:.*$" or "([Uu]ser:|[Pp]assword:)". See regex(7) for details.
@@ -4494,7 +4494,7 @@
 Phase: SPEC
 Platforms: (depends on openssl installation)
 
-Sets the protocol version to be used. Valid strings (not case sensitive) are:  
+Sets the protocol version to be used. Valid strings (not case sensitive) are:
 	SSLv2	Select SSL protocol version 2.
 	SSLv3	Select SSL protocol version 3.
 	SSLv23	Select SSL protocol version 2 or 3. This is the default when
@@ -4511,7 +4511,7 @@
 Platforms: (depends on openssl installation)
 
    Controls check of the peer's certificate. Default is 1 (true). Disabling
-   verify might open your socket for everyone! 
+   verify might open your socket for everyone!
 
 
 Option: openssl-certificate=file
@@ -4550,7 +4550,7 @@
 Platforms: (depends on openssl installation)
 
 Specifies the file with the trusted (root) authority certificates. The file
-must be in PEM format and should contain one or more certificates. 
+must be in PEM format and should contain one or more certificates.
 
 
 Option: openssl-capath=directory
@@ -4563,20 +4563,7 @@
 
 Specify the directory with the trusted (root) certificates. The directory
 must contain certificates in PEM format and their hashes (see OpenSSL
-documentation) 
-
-
-Option: openssl-egd=file
-Aliases: egd
-
-Type: FILENAME
-Option group: OPENSSL
-Phase: SPEC
-Platforms: (depends on openssl installation)
-
-On some systems, openssl requires an explicit source of random data. Specify
-the socket name where an entropy gathering daemon like egd provides random
-data, e.g. /dev/egd-pool.
+documentation)
 
 
 Option: openssl-pseudo
@@ -4640,10 +4627,10 @@
 Platforms: all
 
 This option has to be supported by the application. For socat it means that an
-EOF condition on this data source does not trigger termination procedures, but 
+EOF condition on this data source does not trigger termination procedures, but
 instead the read/write loop waits for one second and then tries to read more
 input data. This behaviour emulates "tail -f" and might not be useful for all
-kinds of input devices, but regular files and /dev/null are good candidates. 
+kinds of input devices, but regular files and /dev/null are good candidates.
 Termination of socat then can only occur by EOF condition of the other input
 device, an error, or by external events.
 
@@ -4716,8 +4703,8 @@
 Phase: INIT
 Platforms: all
 
-Number of retries before the connection or listen attempt is aborted. 
-Default is 0, which means just one attempt. 
+Number of retries before the connection or listen attempt is aborted.
+Default is 0, which means just one attempt.
 
 
 Option: interval=<double>
@@ -4886,7 +4873,7 @@
 The following desribes typical steps for generating a sandbox. Depending on
 your operating system, application, and security requirements, your mileage may
 vary. With the below steps, you will be able to run some check programs to play
-around with the sandbox. 
+around with the sandbox.
 
 I Installation
 1) Create a sandbox group - but give it and all following "sandbox" ids a more
@@ -4906,7 +4893,7 @@
 9) Copy test programs and utilities to bin, e.g. su, id, ls, mount, strace (but
 without SUID/SGID)
 10) Copy the required shared libraries and the shared library loader to their
-directories. 
+directories.
 On Linux, e.g. /lib/ld-linux.so.2, /lib/libnss_compat.so.2
 Note: it is often difficult to find out what shared libraries are (still) not
 installed in the sandbox. The programs invoked in the sandbox typically do not
diff -ru socat-1.7.3.0/xio-openssl.c socat-1.7.3.0.new/xio-openssl.c
--- socat-1.7.3.0/xio-openssl.c	2015-01-24 22:33:42.000000000 +0800
+++ socat-1.7.3.0.new/xio-openssl.c	2015-11-18 10:56:19.441674259 +0800
@@ -6,9 +6,11 @@
 
 #include "xiosysincludes.h"
 #if WITH_OPENSSL	/* make this address configure dependend */
+#include <openssl/comp.h>
 #include <openssl/conf.h>
 #include <openssl/x509v3.h>
 
+
 #include "xioopen.h"
 
 #include "xio-fd.h"
@@ -18,7 +20,7 @@
 #include "xio-openssl.h"
 
 /* the openssl library requires a file descriptor for external communications.
-   so our best effort is to provide any possible kind of un*x file descriptor 
+   so our best effort is to provide any possible kind of un*x file descriptor
    (not only tcp, but also pipes, stdin, files...)
    for tcp we want to provide support for socks and proxy.
    read and write functions must use the openssl crypt versions.
@@ -108,9 +110,8 @@
 const struct optdesc opt_openssl_dhparam     = { "openssl-dhparam",     "dh",    OPT_OPENSSL_DHPARAM,     GROUP_OPENSSL, PH_SPEC, TYPE_FILENAME, OFUNC_SPEC };
 const struct optdesc opt_openssl_cafile      = { "openssl-cafile",     "cafile", OPT_OPENSSL_CAFILE,      GROUP_OPENSSL, PH_SPEC, TYPE_FILENAME, OFUNC_SPEC };
 const struct optdesc opt_openssl_capath      = { "openssl-capath",     "capath", OPT_OPENSSL_CAPATH,      GROUP_OPENSSL, PH_SPEC, TYPE_FILENAME, OFUNC_SPEC };
-const struct optdesc opt_openssl_egd         = { "openssl-egd",        "egd",    OPT_OPENSSL_EGD,         GROUP_OPENSSL, PH_SPEC, TYPE_FILENAME, OFUNC_SPEC };
 const struct optdesc opt_openssl_pseudo      = { "openssl-pseudo",     "pseudo", OPT_OPENSSL_PSEUDO,      GROUP_OPENSSL, PH_SPEC, TYPE_BOOL,     OFUNC_SPEC };
-#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L && !defined(OPENSSL_NO_COMP)
 const struct optdesc opt_openssl_compress    = { "openssl-compress",   "compress", OPT_OPENSSL_COMPRESS,  GROUP_OPENSSL, PH_SPEC, TYPE_STRING,   OFUNC_SPEC };
 #endif
 #if WITH_FIPS
@@ -147,7 +148,7 @@
 static void openssl_conn_loginfo(SSL *ssl) {
    Notice1("SSL connection using %s", SSL_get_cipher(ssl));
 
-#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L && !defined(OPENSSL_NO_COMP)
    {
       const COMP_METHOD *comp, *expansion;
 
@@ -722,7 +723,6 @@
    char *opt_dhparam = NULL;	/* file name of DH params */
    char *opt_cafile = NULL;	/* certificate authority file */
    char *opt_capath = NULL;	/* certificate authority directory */
-   char *opt_egd = NULL;	/* entropy gathering daemon socket path */
 #if OPENSSL_VERSION_NUMBER >= 0x00908000L
    char *opt_compress = NULL;	/* compression method */
 #endif
@@ -741,9 +741,8 @@
    retropt_string(opts, OPT_OPENSSL_CAPATH, &opt_capath);
    retropt_string(opts, OPT_OPENSSL_KEY, &opt_key);
    retropt_string(opts, OPT_OPENSSL_DHPARAM, &opt_dhparam);
-   retropt_string(opts, OPT_OPENSSL_EGD, &opt_egd);
    retropt_bool(opts,OPT_OPENSSL_PSEUDO, &opt_pseudo);
-#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L && !defined(OPENSSL_NO_COMP)
    retropt_string(opts, OPT_OPENSSL_COMPRESS, &opt_compress);
 #endif
 #if WITH_FIPS
@@ -767,7 +766,7 @@
 
    /* OpenSSL preparation */
    sycSSL_library_init();
-   
+
    /*! actions_to_seed_PRNG();*/
 
    if (!server) {
@@ -877,10 +876,6 @@
       }
    }
 
-   if (opt_egd) {
-      sycRAND_egd(opt_egd);
-   }
-
    if (opt_pseudo) {
       long int randdata;
       /* initialize libc random from actual microseconds */
@@ -1098,7 +1093,7 @@
       if (e == ((ERR_LIB_RAND<<24)|
 		(RAND_F_SSLEAY_RAND_BYTES<<12)|
 		(RAND_R_PRNG_NOT_SEEDED)) /*0x24064064*/) {
-	 Error("too few entropy; use options \"egd\" or \"pseudo\"");
+	 Error("too few entropy; use options \"pseudo\"");
 	 stat = STAT_NORETRY;
       } else {
 	 Msg2(level, "%s(): %s", funcname, ERR_error_string(e, buf));
@@ -1384,7 +1379,7 @@
 	 extstr = OBJ_nid2sn(OBJ_obj2nid(X509_EXTENSION_get_object(ext)));
 	 if (!strcasecmp(extstr, "subjectAltName")) {
 	    void *names;
-	    if (!(meth = X509V3_EXT_get(ext))) break;   
+	    if (!(meth = X509V3_EXT_get(ext))) break;
 	    names = X509_get_ext_d2i(peer_cert, NID_subject_alt_name, NULL, NULL);
 	    if (names) {
 	       int numalts;
diff -ru socat-1.7.3.0/xio-openssl.h socat-1.7.3.0.new/xio-openssl.h
--- socat-1.7.3.0/xio-openssl.h	2015-01-24 18:15:22.000000000 +0800
+++ socat-1.7.3.0.new/xio-openssl.h	2015-11-18 10:56:02.410674607 +0800
@@ -21,9 +21,8 @@
 extern const struct optdesc opt_openssl_dhparam;
 extern const struct optdesc opt_openssl_cafile;
 extern const struct optdesc opt_openssl_capath;
-extern const struct optdesc opt_openssl_egd;
 extern const struct optdesc opt_openssl_pseudo;
-#if OPENSSL_VERSION_NUMBER >= 0x00908000L
+#if OPENSSL_VERSION_NUMBER >= 0x00908000L && !defined(OPENSSL_NO_COMP)
 extern const struct optdesc opt_openssl_compress;
 #endif
 #if WITH_FIPS
