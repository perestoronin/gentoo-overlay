--- old/plugins/video/MPEG4-ffmpeg/mpeg4.cxx	2013-06-21 07:10:00.000000000 +0200
+++ new/plugins/video/MPEG4-ffmpeg/mpeg4.cxx	2016-06-07 16:04:24.929889550 +0200
@@ -354,7 +354,7 @@
 
     virtual bool Construct()
     {
-      return InitEncoder(CODEC_ID_MPEG4);
+      return InitEncoder(AV_CODEC_ID_MPEG4);
     }
 
 
@@ -455,7 +455,7 @@
 
     bool Construct()
     {
-      if (!InitDecoder(CODEC_ID_MPEG4))
+      if (!InitDecoder(AV_CODEC_ID_MPEG4))
         return false;
 
       m_context->flags |= CODEC_FLAG_4MV;
--- old/plugins/video/H.263-1998/h263-1998.cxx	2013-06-21 07:10:00.000000000 +0200
+++ new/plugins/video/H.263-1998/h263-1998.cxx	2016-06-07 16:01:05.049891025 +0200
@@ -555,7 +555,7 @@
 
     bool Construct()
     {
-      if (!InitEncoder(CODEC_ID_H263))
+      if (!InitEncoder(AV_CODEC_ID_H263))
         return false;
 
     #if LIBAVCODEC_RTP_MODE
@@ -598,7 +598,7 @@
 
     bool Construct()
     {
-      return InitEncoder(CODEC_ID_H263P);
+      return InitEncoder(AV_CODEC_ID_H263P);
     }
 };
 
@@ -621,7 +621,7 @@
     bool Construct()
     {
       m_fullFrame->Reset();
-      return InitDecoder(CODEC_ID_H263) && OpenCodec();
+      return InitDecoder(AV_CODEC_ID_H263) && OpenCodec();
     }
 
 
--- old/plugins/video/H.264/h264-x264.cxx	2013-06-21 07:10:00.000000000 +0200
+++ new/plugins/video/H.264/h264-x264.cxx	2016-06-07 16:05:09.469889222 +0200
@@ -763,12 +763,12 @@
 
     virtual bool Construct()
     {
-      if (!InitDecoder(CODEC_ID_H264))
+      if (!InitDecoder(AV_CODEC_ID_H264))
         return false;
 
-      m_context->idct_algo = FF_IDCT_H264;
+      m_context->idct_algo = FF_IDCT_AUTO;
       m_context->flags = CODEC_FLAG_INPUT_PRESERVED | CODEC_FLAG_EMU_EDGE;
-      m_context->flags2 = CODEC_FLAG2_SKIP_RD |
+      m_context->flags2 = CODEC_FLAG2_SKIP_MANUAL |
 #ifdef CODEC_FLAG2_DROP_FRAME_TIMECODE
                           CODEC_FLAG2_DROP_FRAME_TIMECODE |
 #endif
--- old/plugins/video/common/ffmpeg.h	2013-06-21 07:10:00.000000000 +0200
+++ new/plugins/video/common/ffmpeg.h	2016-06-07 16:00:30.479891280 +0200
@@ -120,8 +120,8 @@
     FFMPEGCodec(const char * prefix, EncodedFrame * fullFrame);
     ~FFMPEGCodec();
 
-    virtual bool InitEncoder(CodecID codecId);
-    virtual bool InitDecoder(CodecID codecId);
+    virtual bool InitEncoder(AVCodecID codecId);
+    virtual bool InitDecoder(AVCodecID codecId);
 
     bool SetResolution(unsigned width, unsigned height);
     void SetEncoderOptions(
--- old/plugins/video/common/ffmpeg.cxx	2013-06-21 07:10:00.000000000 +0200
+++ new/plugins/video/common/ffmpeg.cxx	2016-06-07 16:02:49.459890255 +0200
@@ -123,8 +123,10 @@
   if (m_picture != NULL)
 #if LIBAVCODEC_VERSION_INT < AV_VERSION_INT(54, 0, 0)
     av_free(m_picture);
-#else
+#elif LIBAVCODEC_VERSION_INT < AV_VERSION_INT(57, 0, 0)
     avcodec_free_frame(&m_picture);
+#else
+    av_frame_free(&m_picture);
 #endif
   if (m_alignedInputYUV != NULL)
     free(m_alignedInputYUV);
@@ -147,13 +149,13 @@
     return false;
   }
 
-  m_picture = avcodec_alloc_frame();
+  m_picture = av_frame_alloc();
   if (m_picture == NULL) {
     PTRACE(1, m_prefix, "Failed to allocate frame for encoder");
     return false;
   }
 
-  m_context->pix_fmt = PIX_FMT_YUV420P;
+  m_context->pix_fmt = AV_PIX_FMT_YUV420P;
   m_context->workaround_bugs = FF_BUG_AUTODETECT;
 
   // debugging flags
@@ -179,7 +181,7 @@
   static_cast<FFMPEGCodec *>(ctx->opaque)->GetEncodedFrame()->RTPCallBack(data, size, numMB);
 }
 
-bool FFMPEGCodec::InitEncoder(CodecID codecId)
+bool FFMPEGCodec::InitEncoder(AVCodecID codecId)
 {
   PTRACE(5, m_prefix, "Opening encoder");
 
@@ -214,7 +216,7 @@
 }
 
 
-bool FFMPEGCodec::InitDecoder(CodecID codecId)
+bool FFMPEGCodec::InitDecoder(AVCodecID codecId)
 {
   if ((m_codec = avcodec_find_decoder(codecId)) == NULL) {
     PTRACE(1, m_prefix, "Codec not found for decoder");
--- old/src/opal/mediafmt.cxx	2013-06-21 07:10:05.000000000 +0200
+++ new/src/opal/mediafmt.cxx	2016-06-07 15:47:30.409897035 +0200
@@ -1838,7 +1838,7 @@
   AddOption(new OpalMediaOptionUnsigned(OpalVideoFormat::RateControlPeriodOption(),        false, OpalMediaOption::AlwaysMerge, 1000,                        100, 60000));
   AddOption(new OpalMediaOptionUnsigned(OpalMediaFormat::MaxTxPacketSizeOption(),          true,  OpalMediaOption::AlwaysMerge, PluginCodec_RTP_MaxPayloadSize, 100    ));
   AddOption(new OpalMediaOptionString  (OpalVideoFormat::RateControllerOption(),           false                                                                       ));
-  AddOption(new OpalMediaOptionEnum    (OpalVideoFormat::RTCPFeedbackOption(),             false,  OpalVideoFormat::RTCPFeedback::Names(), P_MAX_INDEX,
+  AddOption(new OpalMediaOptionEnum    (OpalVideoFormat::RTCPFeedbackOption(),             false,  OpalVideoFormat::RTCPFeedback().Names(), P_MAX_INDEX,
                                      OpalMediaOption::IntersectionMerge, OpalVideoFormat::e_PLI|OpalVideoFormat::e_FIR|OpalVideoFormat::e_TMMBR|OpalVideoFormat::e_TSTR));
 
   static const char * const RoleEnumerations[OpalVideoFormat::EndContentRole] = {
